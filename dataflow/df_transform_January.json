{
	"name": "df_transform_January",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_tripdata_january_parquet",
						"type": "DatasetReference"
					},
					"name": "TripDataSource"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_weather_csv",
						"type": "DatasetReference"
					},
					"name": "WeatherDataSource"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_taxi_zone_csv",
						"type": "DatasetReference"
					},
					"name": "TaxiZoneDataSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_by_dataflow_csv",
						"type": "DatasetReference"
					},
					"name": "NycTaxiDataSink",
					"rejectedDataLinkedService": {
						"referenceName": "ls_adls_uberreportingdl",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "DerivedTimeColumns"
				},
				{
					"name": "Filter2023"
				},
				{
					"name": "LookupWeather"
				},
				{
					"name": "LookupTaxiZonePU"
				},
				{
					"name": "SelectOnlyRequiredFields"
				},
				{
					"name": "SelectSNWD"
				},
				{
					"name": "CastDate"
				},
				{
					"name": "LookupTaxiZoneDO"
				},
				{
					"name": "DerivedColumns"
				},
				{
					"name": "FillingMissingValues"
				},
				{
					"name": "RemoveRedundantColumns"
				},
				{
					"name": "Cast"
				},
				{
					"name": "FilterYear2023"
				}
			],
			"scriptLines": [
				"source(output(",
				"          VendorID as integer,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as integer,",
				"          DOLocationID as integer,",
				"          passenger_count as integer,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as double,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as integer,",
				"          trip_type as integer,",
				"          congestion_surcharge as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> TripDataSource",
				"source(output(",
				"          Date as string,",
				"          {TAVG (Degrees Fahrenheit)} as string,",
				"          {TMAX (Degrees Fahrenheit)} as long,",
				"          {TMIN (Degrees Fahrenheit)} as long,",
				"          {PRCP (Inches)} as double,",
				"          {SNOW (Inches)} as double,",
				"          {{SNWD} as (Inches as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     dateFormats: ['yyyy-MM-dd'],",
				"     preferredIntegralType: 'long',",
				"     preferredFractionalType: 'double') ~> WeatherDataSource",
				"source(output(",
				"          LocationID as long,",
				"          Borough as string,",
				"          Zone as string,",
				"          service_zone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TaxiZoneDataSource",
				"TripDataSource derive(date_column = toDate(lpep_pickup_datetime),",
				"          pickup_hour = hour(lpep_pickup_datetime),",
				"          pickup_week_of_year = weekOfYear(lpep_pickup_datetime),",
				"          pickup_day_of_week = dayOfWeek(lpep_pickup_datetime),",
				"          pickup_day_of_month = dayOfMonth(lpep_pickup_datetime),",
				"          pickup_month = month(lpep_pickup_datetime),",
				"          pickup_year = year(lpep_pickup_datetime),",
				"          travel_time_seconds = toInteger((lpep_dropoff_datetime-lpep_pickup_datetime)/1000)) ~> DerivedTimeColumns",
				"WeatherDataSource filter(regexSplit(Date, \"-\")[1]=='2023') ~> Filter2023",
				"FilterYear2023, CastDate lookup(date_column == Date,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupWeather",
				"LookupWeather, TaxiZoneDataSource lookup(PULocationID == LocationID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupTaxiZonePU",
				"LookupTaxiZonePU select(mapColumn(",
				"          VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          RatecodeID,",
				"          PULocationID,",
				"          DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          date_column,",
				"          pickup_hour,",
				"          pickup_week_of_year,",
				"          pickup_day_of_week,",
				"          pickup_day_of_month,",
				"          pickup_month,",
				"          pickup_year,",
				"          travel_time_seconds,",
				"          {TMAX (Degrees Fahrenheit)},",
				"          {TMIN (Degrees Fahrenheit)},",
				"          {PRCP (Inches)},",
				"          {SNOW (Inches)},",
				"          PU_Borough = Borough,",
				"          PU_Zone = Zone,",
				"          PU_service_zone = service_zone",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyRequiredFields",
				"Filter2023 select(mapColumn(",
				"          each(match(position!=7))",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectSNWD",
				"SelectSNWD cast(output(",
				"          Date as date 'yyyy-MM-dd'",
				"     ),",
				"     errors: true) ~> CastDate",
				"SelectOnlyRequiredFields, TaxiZoneDataSource lookup(DOLocationID == LocationID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupTaxiZoneDO",
				"FillingMissingValues derive(Vendor = case(VendorID==1, \"Creative Mobile Technologies\",\r",
				"     VendorID==2,\"VeriFone Inc.\",\r",
				"     'Null'\r",
				"    ),",
				"          store_and_fwd_flag = case(store_and_fwd_flag==\"N\", \"N\",     \r",
				"    store_and_fwd_flag==\"Y\",\"Y\",     \r",
				"    'Null'    ),",
				"          Ratecode = case(RatecodeID==1,'Standard rate',\r",
				"     RatecodeID==2,'JFK',\r",
				"     RatecodeID==3,'Newark',\r",
				"     RatecodeID==4,'Nassau or Westchester',\r",
				"     RatecodeID==5,'Negotiated fare',\r",
				"     RatecodeID==6,'Group ride',\r",
				"     \"Null\"\r",
				"    ),",
				"          payment_type = case(payment_type==1,'Credit card',     \r",
				"payment_type==2,'Cash',     \r",
				"payment_type==3,'No charge',     \r",
				"payment_type==4,'Dispute',     \r",
				"payment_type==5,'Unknown',     \r",
				"payment_type==6,'Voided trip',     \r",
				"\"Null\"    ),",
				"          trip_type = case(trip_type==1,'Street-hail',     \r",
				"trip_type==2,'Dispatch',     \r",
				"\"Null\"    ),",
				"          TMAX_Celcius = toDecimal(({TMAX (Degrees Fahrenheit)}-32)/1.8,5,2),",
				"          TMIN_Celcius = toDecimal(({TMIN (Degrees Fahrenheit)}-32)/1.8, 5,2),",
				"          TAVG_Celcius = toDecimal(({TMAX (Degrees Fahrenheit)}+{TMIN (Degrees Fahrenheit)})/2,5,2),",
				"          PRCP_cm = toDecimal({PRCP (Inches)}*2.54,5,2),",
				"          SNOW_cm = toDecimal({SNOW (Inches)}*2.54,5,2),",
				"          trip_distance_km = toDecimal(trip_distance*1.609344, 5, 2),",
				"          Total_Amount_derived = toDecimal(fare_amount+extra+mta_tax+tip_amount+tolls_amount+toInteger(ehail_fee)+improvement_surcharge+congestion_surcharge,5,2)) ~> DerivedColumns",
				"LookupTaxiZoneDO derive(fare_amount = iifNull(fare_amount, 0, fare_amount),",
				"          extra = iifNull(extra, 0, extra),",
				"          mta_tax = iifNull(mta_tax, 0, mta_tax),",
				"          tip_amount = iifNull(tip_amount, 0, tip_amount),",
				"          tolls_amount = iifNull(tolls_amount, 0, tolls_amount),",
				"          ehail_fee = iif(isNull(ehail_fee)==true(), 0, toInteger(ehail_fee)),",
				"          improvement_surcharge = iifNull(improvement_surcharge, 0, improvement_surcharge),",
				"          congestion_surcharge = iifNull(congestion_surcharge, 0, congestion_surcharge)) ~> FillingMissingValues",
				"DerivedColumns select(mapColumn(",
				"          Vendor,",
				"          pickup_datetime,",
				"          dropoff_datetime,",
				"          travel_time_seconds,",
				"          store_and_fwd_flag,",
				"          Ratecode,",
				"          trip_type,",
				"          payment_type,",
				"          passenger_count,",
				"          trip_distance_km,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          congestion_surcharge,",
				"          total_amount,",
				"          Total_Amount_Derived = Total_Amount_derived,",
				"          date_column,",
				"          pickup_year,",
				"          pickup_month,",
				"          pickup_week_of_year,",
				"          pickup_day_of_month,",
				"          pickup_day_of_week,",
				"          pickup_hour,",
				"          PU_LocationID = PULocationID,",
				"          PU_Borough,",
				"          PU_Zone,",
				"          PU_service_zone,",
				"          DO_LocationID = DOLocationID,",
				"          DO_Borough = Borough,",
				"          DO_Zone = Zone,",
				"          DO_service_zone = service_zone,",
				"          TMAX_Celcius,",
				"          TMIN_Celcius,",
				"          TAVG_Celcius,",
				"          PRCP_cm,",
				"          SNOW_cm",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveRedundantColumns",
				"RemoveRedundantColumns cast(output(",
				"          passenger_count as integer",
				"     ),",
				"     errors: true) ~> Cast",
				"DerivedTimeColumns filter(pickup_year==2023) ~> FilterYear2023",
				"Cast sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['transformed_data_with_dataflow_january.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> NycTaxiDataSink"
			]
		}
	}
}